import pandas as pd
import numpy as np

# read data
payments = pd.read_csv("payments.csv")
customers = pd.read_csv("customers.csv")

# merge data
data = pd.merge(payments, customers, on="customer_id", how="inner")

# transfer date data
data['payment_date'] = pd.to_datetime(data['payment_date'])

# time series 
data['year'] = data['payment_date'].dt.year
data['month'] = data['payment_date'].dt.month

# Fill Nan
data.fillna(data.mean(), inplace=True)

# Characterised
X = data.drop(columns=['payment_amount', 'payment_date', 'customer_id'])  # Trim unnnecessary
y = data['payment_amount']

# Split train and test
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

# Initialise model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# train data
model.fit(X_train, y_train)

# predict
y_pred = model.predict(X_test)

# evaluate
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f"RMSE: {rmse}")



from sklearn.model_selection import GridSearchCV

# Define grid
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10]
}

# Grid Search
grid_search = GridSearchCV(estimator=RandomForestRegressor(random_state=42), 
                           param_grid=param_grid, 
                           cv=3, scoring='neg_mean_squared_error', verbose=2)
grid_search.fit(X_train, y_train)

# Best parameters
print(f"Best Parameters: {grid_search.best_params_}")

# Train model with best parameters
best_model = grid_search.best_estimator_
best_model.fit(X_train, y_train)

# Save best model for deploy
import joblib

# save model
joblib.dump(best_model, "payment_prediction_model.pkl")

# Load model
loaded_model = joblib.load("payment_prediction_model.pkl")


# Use new data to predict
new_data = pd.DataFrame({
    'age': [35], 
    'gender': ['M'], 
    'region': ['North'], 
    'year': [2025], 
    'month': [3]
})
prediction = loaded_model.predict(new_data)
print(f"Predicted Payment Amount: {prediction[0]}")
